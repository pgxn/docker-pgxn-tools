name: CI/CD
on:
  push:
  pull_request:
  schedule:
    - cron: '0 14 3 * *' # Monthly at 2pm on the 3rd
jobs:
  pgxs:
    name: üêò PGXS on Postgres ${{ matrix.pg }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg: [17, 16, 15, 14, 13, 12, 11, 10, 9.6, 9.5, 9.4, 9.3, 9.2, 9.1, '9.0', 8.4, 8.3, 8.2]
    steps:
      - uses: actions/checkout@v4
      - name: Build Image
        run: docker build -t pgxn-tools-test .
      # First test system UID, otherwise it can't use files touched by root.
      - name: Test with system UID
        run: "docker run -w /repo --rm --volume \"$(pwd):/repo\" -e AS_USER=pgxn_worker -e LOCAL_UID=$(id -u) pgxn-tools-test ./test/pgxs/runtest.sh ${{ matrix.pg }}"
      - name: Test as root
        run: "docker run -w /repo --rm --volume \"$(pwd):/repo\" pgxn-tools-test ./test/pgxs/runtest.sh ${{ matrix.pg }} hello"

  pgrx:
    name: ü¶Ä pgrx on Postgres ${{ matrix.pg }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg: [17, 16, 15, 14, 13, 12]
    steps:
      - uses: actions/checkout@v4
      - name: Build Image
        run: docker build -t pgxn-tools-test .
      # First test system UID, otherwise it can't use files touched by root.
      - name: Test with system UID
        run: "docker run -w /repo --rm --volume \"$(pwd):/repo\" -e AS_USER=pgxn_worker -e LOCAL_UID=$(id -u) pgxn-tools-test ./test/pgrx/runtest.sh ${{ matrix.pg }}"
      - name: Test as root
        run: "docker run -w /repo --rm --volume \"$(pwd):/repo\" pgxn-tools-test ./test/pgrx/runtest.sh ${{ matrix.pg }}"

  bundle:
    name: ${{ matrix.util.icon }} Bundle with ${{ matrix.util.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        util:
          - { icon: üè∑Ô∏è, name: git, dir: "", run: ./test/pgxs }
          - { icon: ü§ê, name: zip, dir: /test, run: ./pgxs }
    env: { PG_VERSION: 16 }
    steps:
      - uses: actions/checkout@v4
      - name: Build Image
        run: docker build -t pgxn-tools-test .
      - name: Test ${{ matrix.util.name }}
        run: "docker run -w /repo --rm --volume \"$(pwd)${{ matrix.util.dir }}:/repo\" pgxn-tools-test ${{ matrix.util.run }}/runtest.sh ${{ env.PG_VERSION }} ${{ matrix.util[1] }}"
      - name: Test ${{ matrix.util.name }} with extra file
        run: "docker run -w /repo --rm --volume \"$(pwd)${{ matrix.util.dir }}:/repo\" pgxn-tools-test ${{ matrix.util.run }}/runtest.sh ${{ env.PG_VERSION }} ${{ matrix.util[1] }} yes"
      - name: Test ${{ matrix.util.name }} with archive-all
        env: { GIT_ARCHIVE_CMD: archive-all }
        run: "docker run -w /repo --rm --volume \"$(pwd)${{ matrix.util.dir }}:/repo\" pgxn-tools-test ${{ matrix.util.run }}/runtest.sh ${{ env.PG_VERSION }} ${{ matrix.util[1] }}"
      - name: Test NO_CLUSTER
        run: "docker run -w /repo -e NO_CLUSTER=1 --rm --volume \"$(pwd)${{ matrix.util.dir }}:/repo\" pgxn-tools-test ${{ matrix.util.run }}/no_cluster_test.sh ${{ env.PG_VERSION }}"

  publish:
    # Publish for a tag starting with v.
    name: Push to Docker Hub
    needs: [pgxs, pgrx, bundle]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pgxn/pgxn-tools
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=bookworm
          labels: |
            org.opencontainers.image.title=PGXN Tools
            org.opencontainers.image.licenses=PostgreSQL
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        # https://github.com/marketplace/actions/build-and-push-docker-images
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
